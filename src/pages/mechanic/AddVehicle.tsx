import React, { useEffect, useState } from 'react';

import { Modal } from 'bootstrap';
import 'bootstrap-icons/font/bootstrap-icons.css';

import type { CreateCarDto } from '../../services/car.service.ts';
import { carService } from '../../services/car.service.ts';
import type { Car } from '../../types/car.types.ts';

const conditionTranslations = {
  OPERATIONAL: '–ò—Å–ø—Ä–∞–≤–Ω–æ',
  IN_SERVICE: '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏',
  UNDER_REPAIR: '–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ',
};

export const getConditionColor = (condition: Car['condition']) => {
  switch (condition) {
    case 'OPERATIONAL':
      return 'success';
    case 'IN_SERVICE':
      return 'warning';
    case 'UNDER_REPAIR':
      return 'danger';
    default:
      return 'secondary';
  }
};
const AddVehicle: React.FC = () => {
  const [cars, setCars] = useState<Car[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const [form, setForm] = useState<CreateCarDto>({
    brand: '',
    model: '',
    number: '',
    capacity: 0,
    mileage: 0,
    condition: 'OPERATIONAL',
    lastMaintenanceDate: ''
  });

  const [submitting, setSubmitting] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –≤ —Ä—É—Å—Å–∫–∏–µ
    const latinToCyrillic = (input: string): string => {
      const map: Record<string, string> = {
        A: '–ê',
        B: '–í',
        E: '–ï',
        K: '–ö',
        M: '–ú',
        H: '–ù',
        O: '–û',
        P: '–†',
        C: '–°',
        T: '–¢',
        Y: '–£',
        X: '–•',
      };

      return input
        .split('')
        .map((char) => {
          const upperChar = char.toUpperCase();
          return map[upperChar] ?? char;
        })
        .join('');
    };

    let newValue: string | number = value;

    // –°–ø–µ—Ü–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—è number (–≥–æ—Å. –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã)
    if (name === 'number') {
      newValue = latinToCyrillic(value);
    } else if (type === 'number') {
      newValue = value === '' ? '' : Number(value);
    }

    setForm((prev) => ({
      ...prev,
      [name]: newValue,
    }));
  };

  const handleAddCar = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const newCar = await carService.createCar({
        ...form,
        capacity: Number(form.capacity),
        mileage: Number(form.mileage),
      });

      setCars((prev) => [...prev, newCar]);

      // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
      setForm({
        brand: '',
        model: '',
        number: '',
        capacity: 0,
        mileage: 0,
        condition: 'OPERATIONAL',
        lastMaintenanceDate: '',
      });

      setTimeout(() => {
        const modalEl = document.getElementById('addCarModal');
        if (modalEl) {
          const modal = Modal.getInstance(modalEl) || new Modal(modalEl);
          modal.hide();
        }

        // üí° –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ backdrop —Ç–æ—á–Ω–æ —É–¥–∞–ª—ë–Ω (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        document.body.classList.remove('modal-open');
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) backdrop.remove();
      }, 100); // 100ms ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    } catch (err) {
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  useEffect(() => {
    const fetchCars = async () => {
      try {
        const data = await carService.getAllCars();
        setCars(data);
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—à–∏–Ω—ã');
      } finally {
        setLoading(false);
      }
    };

    fetchCars();
  }, []);

  return (
    <div className="container mt-5">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h1>–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</h1>
        {cars.length != 0 && (
          <button
            className="btn btn-primary mb-3"
            type="button"
            data-bs-toggle="modal"
            data-bs-target="#addCarModal"
          >
            <i className="bi bi-plus-lg me-2"></i>
            –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É
          </button>
        )}
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      {loading ? (
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      ) : error ? (
        <div className="alert alert-danger">{error}</div>
      ) : cars.length === 0 ? (
        <div className="text-center">
          <p className="text-center">–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω</p>
          <button
            className="btn btn-primary mb-3"
            type="button"
            data-bs-toggle="modal"
            data-bs-target="#addCarModal"
          >
            <i className="bi bi-plus-lg me-2"></i>
            –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É
          </button>
        </div>
      ) : (
        <div className="table-responsive">
          <table className="table table-hover">
            <thead>
              <tr>
                <th>–ú–∞—Ä–∫–∞</th>
                <th>–ú–æ–¥–µ–ª—å</th>
                <th>–ì–æ—Å. –Ω–æ–º–µ—Ä</th>
                <th>–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (–∫–≥)</th>
                <th>–ü—Ä–æ–±–µ–≥ (–∫–º)</th>
                <th>–°–æ—Å—Ç–æ—è–Ω–∏–µ</th>
                <th>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û</th>
              </tr>
            </thead>
            <tbody>
              {cars.map((car) => (
                <tr key={car.id}>
                  <td>{car.brand}</td>
                  <td>{car.model}</td>
                  <td>{car.number}</td>
                  <td>{car.capacity}</td>
                  <td>{car.mileage}</td>
                  <td>
                    <span className={`badge bg-${getConditionColor(car.condition)}`}>
                      {conditionTranslations[car.condition]}
                    </span>
                  </td>
                  <td>
                    {car.lastMaintenanceDate
                      ? new Date(car.lastMaintenanceDate).toLocaleDateString()
                      : '‚Äî'}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Offcanvas —Ñ–æ—Ä–º–∞ */}
      <div
        className="modal fade"
        id="addCarModal"
        tabIndex={-1}
        aria-labelledby="addCarModalLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog modal-lg modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="addCarModalLabel">
                –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
              </h5>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div className="modal-body">
              <form onSubmit={handleAddCar}>
                <div className="mb-3">
                  <label className="form-label">–ú–∞—Ä–∫–∞</label>
                  <input
                    type="text"
                    className="form-control"
                    name="brand"
                    value={form.brand}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">–ú–æ–¥–µ–ª—å</label>
                  <input
                    type="text"
                    className="form-control"
                    name="model"
                    value={form.model}
                    onChange={handleChange}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">–ì–æ—Å. –Ω–æ–º–µ—Ä</label>
                  <input
                    type="text"
                    className="form-control"
                    name="number"
                    value={form.number}
                    onChange={handleChange}
                    onKeyDown={(e) => {
                      const value = e.currentTarget.value.toUpperCase();
                      const position = e.currentTarget.selectionStart || 0;
                      const key = e.key.toUpperCase();

                      const allowedLetters = '–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX';
                      const isLetter = allowedLetters.includes(key);
                      const isDigit = /\d/.test(key);
                      const isControl = [
                        'Backspace',
                        'ArrowLeft',
                        'ArrowRight',
                        'Tab',
                        'Delete',
                      ].includes(e.key);

                      // –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ —É–¥–∞–ª–µ–Ω–∏–µ
                      if (isControl) return;

                      // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 9 —Å–∏–º–≤–æ–ª–æ–≤
                      if (value.length >= 9) {
                        e.preventDefault();
                        return;
                      }

                      // –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º:
                      if (
                        (position === 0 && !isLetter) || // 1-—è –±—É–∫–≤–∞
                        ([1, 2, 3].includes(position) && !isDigit) || // 2‚Äì4 —Ü–∏—Ñ—Ä—ã
                        ([4, 5].includes(position) && !isLetter) || // 5‚Äì6 –±—É–∫–≤—ã
                        ([6, 7, 8].includes(position) && !isDigit) // 7‚Äì9 —Ä–µ–≥–∏–æ–Ω
                      ) {
                        e.preventDefault();
                      }
                    }}
                    maxLength={9}
                    required
                    pattern="^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{1}\d{3}(?<!000)[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•ABEKMHOPCTYX]{2}\d{2,3}$"
                    title="–§–æ—Ä–º–∞—Ç: –ê123–í–°77 –∏–ª–∏ A123BC77"
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">–ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (–∫–≥)</label>
                  <input
                    type="number"
                    className="form-control"
                    name="capacity"
                    value={form.capacity}
                    onChange={handleChange}
                    min={1}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">–ü—Ä–æ–±–µ–≥ (–∫–º)</label>
                  <input
                    type="number"
                    className="form-control"
                    name="mileage"
                    value={form.mileage}
                    onChange={handleChange}
                    min={0}
                    required
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">–°–æ—Å—Ç–æ—è–Ω–∏–µ</label>
                  <select
                    className="form-select"
                    name="condition"
                    value={form.condition}
                    onChange={handleChange}
                  >
                    {Object.entries(conditionTranslations).map(([key, label]) => (
                      <option key={key} value={key}>
                        {label}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="mb-3">
                  <label className="form-label">–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û</label>
                  <input
                    type="date"
                    className="form-control"
                    name="lastMaintenanceDate"
                    value={form.lastMaintenanceDate ?? ''}
                    onChange={handleChange}
                  />
                </div>

                <div className="modal-footer">
                  <button type="button" className="btn btn-secondary" data-bs-dismiss="modal">
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                  <button type="submit" className="btn btn-success" disabled={submitting}>
                    <i className="bi bi-check-lg me-1"></i>
                    {submitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddVehicle;
